What's this?
------------

This is an abitestsuite for gcc and binutils for the x86-64
architechture. It currently tests these areas:

   1: Tests for correct size and alignment of all basic types, structs
      and arrays. Also tests bitfields.
   2: Tests that arguments of basic types are passed and returned correctly.
   3: Tests that arguments of struct and union types are passed and
      returned correctly. Also tests for mixed struct/union/scalar types
   4: Tests passing a variable number of args
   6: Tests value correctness in returning scalar types, structs and unions.

Questions about the abitest can be sent to discuss@x86-64.org or to
Bo Thorsen <bo@suse.co.uk>.


TODO
----

Make a test that clobbers all registers and just returns. This is
meant to test if all callee-saved registers are saved and restored. A
similar test should be made to test caller-saved registers.

The value returning tests could be augmented with a test to check that the
values are not just correct, but also passed in the correct registers.


Documentation
-------------

No configuration is being done yet, so if the defaults here doesn't
suit your setup, edit the Makefile and the runtime scripts.

To run the test, simply execute "abitest". If you don't provide any
arguments, all tests will be run. If you want to run only a number
of tests, give the names of the files as arguments to abitest.

You need to copy the files abitest.conf and runtime.abitest to
/work/simics/home/x86-test-machine. Both this and the tests assume
that simics is placed in /work/simics. You need to change the
SIMICS_DIR variable in the file abitest if this is not the case.

The Makefile only exists now to build the autogenerated tests. You
can use "make test" but all this does is to call abitest.


Known problems in GCC and binutils for now
------------------------------------------

There are no known bugs in GCC right now. The following limitations
exist:

- the types __int128, __float128, __m64 and __m128 are not implemented

The fact that a lot of the tests fail with optimization is not strange,
because the optimization levels is supposed to invalidate some of the
assumptions made in the tests. A scheme to only run meaningful tests
will be implemented.
